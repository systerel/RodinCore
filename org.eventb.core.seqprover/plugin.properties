###############################################################################
# Copyright (c) 2006, 2008 ETH Zurich and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     ETH Zurich - initial API and implementation
#     Systerel - added FunOvrGoalTac and FunOvrHypTac tactics
#     Systerel - added partitionRewriteTac
#     Systerel - added onePointRule, arithRewrites, finiteHypBoundedGoal
#     Systerel - moved findContrHypsTac to Discharge section, added contrHyps
###############################################################################

pluginName = Event-B Sequent Prover Plug-in
pluginProvider = ETH Zurich

point.reasoners = Reasoners
point.autoTactics = Auto Tactics

# Reasoners
allDName=Universal instantiation
allmpDName=Universal instantiation & mp
allIName=Universal introduction
conjName=Conjunction elimination / introduction
cutName=Cut rule
contrName=Contradiction
contrHypsName=Contradicting hypotheses
disjEName=Disjunction elimination
doCaseName=Case distinction on a predicate
eqName=Apply equality from left to right
exEName=Existential elimination (deprecated)
exIName=Existential introduction
falseHypName=False hypothesis
hypName=Hyp rule
impEName=Implication Elimination
impIName=Implication Introduction
mngHypName=Manage Hypotheses
reviewName=Manual review
trueGoalName=True goal
autoImpEname=Automatic Implication Elimination
exFName=Existential forward inference
conjFName=Conjunction forward inference
isFunGoalName=Is functional goal
onePointRuleName=One Point Rule

# Simple rewriters
removeNegationName = Remove Negation
disjToImplName = Transform a disjunction to implication
trivialName = Simplify trivial predicates
typePredName = Simplify type predicates

autoRewritesName = Automatic rewrites
typeRewritesName = Automatic type rewrites
doubleImplHypRewritesName = Double implication in hyp rewrites
disjToImplRewritesName = Disjunction to implication rewrites in hypothesis 
negEnumName = Negation with enumerated set
funOvrName = Function Overriding
heName= Apply equality from right to left
mtName= Modus Tollens
rnName= Remove Negation
rmName= Remove Membership
riName= Remove Inclusion
sirName= Remove Strict Inclusion
inclusionSetMinusRightRewritesName= Rewrites inclusion with set minus on the right 
riUniversalName= Remove Inclusion (Universal)
hypOrName = Disjunctive goal with hypothesis
impAndRewritesName = Implication with conjunctive right predicate
impOrRewritesName = Implication with disjunctive left predicate
typeRewritesName = Type Rewrites
relImgUnionRightRewritesName = Relational image with union right rewrites
relImgUnionLeftRewritesName = Relational image with union left rewrites
setEqlRewritesName = Set equality rewrites
eqvRewritesName = Equivalence rewrites
funInterImgName = Function apply to intersection image
funSetMinusImgName = Function apply to set minus image
funSingletonImgName = Function apply to singleton set image
funCompImgName = Function composition image
convRewritesName = Converse relation rewrites
domDistLeftRewritesName = Domain distribution left rewrites
domDistRightRewritesName = Domain distribution right rewrites
ranDistLeftRewritesName = Range distribution left rewrites
ranDistRightRewritesName = Range distribution right rewrites
setMinusRewritesName = Set minus rewrites
andOrDistRewritesName = And/Or distribution rewrites
unionInterDistRewritesName = Union/Intersection distribution rewrites
compUnionDistRewritesName = Composition/Union distribution rewrites
domRanUnionDistRewritesName = Domain/Union or Range/Union distribution rewrites
relOvrRewritesName = Relation overriding rewrites
compImgRewritesName = Composition image rewrites
domCompRewritesName = Domain manipulation with composition rewrites
ranCompRewritesName = Range manipulation with composition rewrites
finiteSetName = Finiteness of set
finiteInterName = Finiteness of intersection
finiteSetMinusName = Finiteness of set minus
finiteRelationName = Finiteness of relation
finiteRelImgName = Finiteness of relational image
finiteDomName = Finiteness of domain
finiteRanName = Finiteness of range
finiteFunctionName = Finiteness of function
finiteFunConvName = Finiteness of function converse
finiteFunRelImgName = Finiteness of relational image of a function
finiteFunRanName = Finiteness of range of a function
finiteFunDomName = Finiteness of domain of a function
finiteMinName = Existence of minimum to finiteness
finiteMaxName = Existence of maximum to finiteness
finiteNegativeName = Finiteness of set of non-positive numbers
finitePositiveName = Finiteness of set of non-negative numbers
cardComparisonName = Arithmetic comparison of cardinality
cardUpToName = Cardinality of range of numbers
partitionRewritesName = Partition rewrites
arithRewritesName = Arithmetic rewrites
totalDomName=Total Domain Substitution
funImgSimplifiesName=Functional Image Simplification

# AutoTactics

# Discharge

trueGoalTacName = True Goal (Discharge)
trueGoalTacDesc = Discharges any sequent whose goal is 'true'.

falseHypTacName = False Hypothesis (Discharge)
falseHypTacDesc = Discharges any sequent containing a 'false' hypothesis.

goalInHypTacName = Goal in Hypotheses (Discharge)
goalInHypTacDesc = Discharges any sequent whose goal is contained in its hypotheses.

goalDisjInHypName = Goal Disjunct in Hypotheses (Discharge)
goalDisjInHypDesc = Discharges any sequent whose goal is a disjunction and one of whose disjuncts is present in the hypotheses.

funGoalTacName = Functional Goal (Discharge)
funGoalTacDesc = Tries to discharge a sequent whose goal states that an expression is a function (i.e. 'E : T1 -/-> T2', where T1 and T2 are type expressions).

finiteHypBoundedGoalDesc = Discharges a sequent whose goal states the existence of a bound on an expression known to be finite
finiteHypBoundedGoalName = Bounded Goal with finite Hypothesis (Discharge)

findContrHypsTacName = Find Contradictory Hypotheses (Discharge)
findContrHypsTacDesc = Discharges a sequent by finding contradictory hypotheses. This tactic tries to find a contradiction using each selected hypothesis that is a negation.

# Simplify

autoRewriteTacName = Simplification Rewriter (Simplify)
autoRewriteTacDesc = Tries to simplify all predicates in a sequent using pre-defined simplification rewritings.

typeRewriteTacName = Type Rewriter (Simplify)
typeRewriteTacDesc = Simplifies predicates containing type expressions such as 'E:Ty' to 'true' and 'Ty={}' to 'false'.

impGoalTacName = Implicative Goal (Simplify)
impGoalTacDesc = Simplifies any sequent with an implicative goal by adding the left hand side of the implication to the hypotheses and making its right hand side the new goal.

forallGoalTacName = For-all Goal (Simplify)
forallGoalTacDesc = Simplifies any sequent with a universally quantified goal by freeing all its bound variables.

existsHypTacName = Exists Hypotheses (Simplify)
existsHypTacDesc = Simplifies any sequent containing existentially quantified hypotheses by freeing their bound variables.

eqHypTacName = Use Equals Hypotheses (Simplify)
eqHypTacDesc = Simplifies a sequent by rewriting all selected hypotheses and the goal using a (selected) hypothesis that is an equality between a free variable and an expression that does not contain the free variable. The used equality remains in the selected hypotheses to be used again.

shrinkImpHypTacName = Shrink Implicative Hypotheses (Simplify)
shrinkImpHypTacDesc = Simplifies the implicative hypotheses in a sequent by removing predicates from their left hand sides that are hypotheses. 

shrinkEnumHypTacName = Shrink Enumerated Set (Simplify)
shrinkEnumHypTacDesc = Simplifies selected hypotheses of the form 'E={a,b,c}' to 'E={a,c}' after finding the hypothesis 'not(E=b)'.

splitRightConjImpHypTacName = Implicative Hypotheses with Conjunctive RHS (Simplify)
splitRightConjImpHypTacDesc = Simplifies all selected hypotheses of the form 'P => Q /\ R' into multiple implications: 'P => Q' , 'P => R'.

splitLeftDisjImpHypTacName = Implicative Hypotheses with Disjunctive LHS (Simplify)
splitLeftDisjImpHypTacDesc = Simplifies all selected hypotheses of the form 'P \/ Q => R' into multiple implications: 'P => R' , 'Q => R'.

partitionRewriteTacName = Partition Rewriter (Simplify)
partitionRewriteTacDesc = Expands predicates "partition(...)" in visible hypotheses and goal.

funImgSimpTacName = Functional Image (Simplify)
funImgSimpTacDesc = Simplifies functional image

# Split

conjGoalTacName = Conjunctive Goal (Split)
conjGoalTacDesc = Splits a conjunctive goal into multiple subgoals.

funOvrGoalTacName=Functional Overriding in Goal (Split)
funOvrGoalTacDesc=Performs case splitting for each functional overriding \
occurring in goal. Expressions (f<+g)(x) are rewritten as f(x) and g(x) in the \
two subgoals. Case splitting is repeated recursively until the goal does not \
contain any functional overriding.

funOvrHypTacName=Functional Overriding in Hypothesis (Split)
funOvrHypTacDesc=Performs case splitting for each functional overriding \
occurring in a selected hypothesis. Expressions (f<+g)(x) are rewritten as \
f(x) and g(x) in the new hypotheses generated in place of the original \
hypothesis. Case splitting is repeated recursively until no selected hypothesis \
contains any functional overriding.

onePointGoalTacName=One Point Rule in Goal (Split)
onePointGoalTacDesc=Performs One Point Rule repeatedly on goal until it cannot be applied anymore.

onePointHypTacName=One Point Rule in Hypotheses (Split)
onePointHypTacDesc=Performs One Point Rule repeatedly on each selected hypothesis, \
until it cannot be applied anymore on any selected hypothesis.

# Mixed

clarifyGoalTacName = Clarify Goal (Mixed)
clarifyGoalTacDesc = Clarifies the goal of the sequent by repeatedly splitting conjunctions, simplifying implications and universal quantifiers, and discharging sequents with a true goal, a false hypothesis, and where the goal is contained in the hypotheses.









